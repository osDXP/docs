{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 What is osDXP Dashboard? \u00b6 It's a WordPress Feature plugin that creates a DXP experience, serving as a framework for osDXP modules and transforming the administrative interface into a more productive environment for the enterprise. Get in touch \u00b6 Chat with us on Slack Ask a question/Find an answer on our Website Get the latest version \u00b6 Available on the GitHub releases page","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"#what-is-osdxp-dashboard","text":"It's a WordPress Feature plugin that creates a DXP experience, serving as a framework for osDXP modules and transforming the administrative interface into a more productive environment for the enterprise.","title":"What is osDXP Dashboard?"},{"location":"#get-in-touch","text":"Chat with us on Slack Ask a question/Find an answer on our Website","title":"Get in touch"},{"location":"#get-the-latest-version","text":"Available on the GitHub releases page","title":"Get the latest version"},{"location":"changelog/","text":"Changelog \u00b6 See the Releases section of our GitHub project for changelogs for each release version of osDXP Dashboard, or a historical changelog can be found in the repo, here .","title":"Changelog"},{"location":"changelog/#changelog","text":"See the Releases section of our GitHub project for changelogs for each release version of osDXP Dashboard, or a historical changelog can be found in the repo, here .","title":"Changelog"},{"location":"conditioning/","text":"Conditionally load osDXP logic \u00b6 If conditionally loading osDXP in your premium plugin, consider having a separate type of serial number for osDXP-only content, thus having osDXP functionality be conditionally loaded only for a specific type of serial numbers. Constants availability \u00b6 There are a number of constants defined in the main osDXP Dashboard Plugin file that you can check for in order to conditionally load your osDXP-speciffic logic. Below are two common examples and their usage. OSDXP_DASHBOARD_FILE - the main osDXP Dashboard Plugin file OSDXP_DASHBOARD_VER - osDXP Dashboard Plugin Version. This can be used to enforce minimum version compatibility Code Example \u00b6 Below you can find an example of conditionally loading osDXP logic based on constant availability and minimum version compatibility. //Check for osDXP availability if (defined('OSDXP_DASHBOARD_VER')) { //Check for minimum required version if ('1.0.3' >= OSDXP_DASHBOARD_VER) { //Loads osDXP-speciffic file. require_once 'dxp.php'; } else { //Gracefully fail with a notice. } } else { //Gracefully fail with a notice. }","title":"Conditioning osDXP Logic"},{"location":"conditioning/#conditionally-load-osdxp-logic","text":"If conditionally loading osDXP in your premium plugin, consider having a separate type of serial number for osDXP-only content, thus having osDXP functionality be conditionally loaded only for a specific type of serial numbers.","title":"Conditionally load osDXP logic"},{"location":"conditioning/#constants-availability","text":"There are a number of constants defined in the main osDXP Dashboard Plugin file that you can check for in order to conditionally load your osDXP-speciffic logic. Below are two common examples and their usage. OSDXP_DASHBOARD_FILE - the main osDXP Dashboard Plugin file OSDXP_DASHBOARD_VER - osDXP Dashboard Plugin Version. This can be used to enforce minimum version compatibility","title":"Constants availability"},{"location":"conditioning/#code-example","text":"Below you can find an example of conditionally loading osDXP logic based on constant availability and minimum version compatibility. //Check for osDXP availability if (defined('OSDXP_DASHBOARD_VER')) { //Check for minimum required version if ('1.0.3' >= OSDXP_DASHBOARD_VER) { //Loads osDXP-speciffic file. require_once 'dxp.php'; } else { //Gracefully fail with a notice. } } else { //Gracefully fail with a notice. }","title":"Code Example"},{"location":"getting-started/","text":"Getting Started \u00b6 This documentation is structured around the assumption that you already have the basic knowledge required to create a Wordpress Plugin. Installation \u00b6 Via the release asset \u00b6 Open the latest release, available from the releases page here . Download the osdxp-dashboard.zip file from the release assets. Upload and install in your Wordpress instance as a regular plugin. Enjoy! Via the repo \u00b6 Clone the repository in /wp-content/plugins/osdxp-dashboard Run composer install . Enjoy! Via Composer \u00b6 Run composer require osdxp/osdxp-dashboard . Enjoy! Building assets \u00b6 To compile source JS and SCSS files there are several options available. First, run npm install to pull missing dependencies. Run npm run build to compile development-focused, unminified files. Run npm run prod to compile production-ready, minified files. Run npm run watch or npm run watch-prod to compile with browsersync enabled(injecting modifications without page reload). Enjoy! Plugin Conversion \u00b6 If you already have a plugin developed and would like to convert it to be compatible with osDXP, following this developer reference will provide you with the required information to achieve osDXP compatibility. Resources \u00b6 Below you can find examples of osDXP plugin conversions, available from the osDXP GitHub organization repos. Example Module Integration, using WP Maintenance Mode plugin Shared Counts for osDXP Login Logo for osDXP Versioning \u00b6 For transparency into our release cycle and in striving to maintain backward compatibility, osDXP Dashboard is maintained under the Romantic Versioning guidelines . Sometimes we screw up, but we adhere to those rules whenever possible.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This documentation is structured around the assumption that you already have the basic knowledge required to create a Wordpress Plugin.","title":"Getting Started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#via-the-release-asset","text":"Open the latest release, available from the releases page here . Download the osdxp-dashboard.zip file from the release assets. Upload and install in your Wordpress instance as a regular plugin. Enjoy!","title":"Via the release asset"},{"location":"getting-started/#via-the-repo","text":"Clone the repository in /wp-content/plugins/osdxp-dashboard Run composer install . Enjoy!","title":"Via the repo"},{"location":"getting-started/#via-composer","text":"Run composer require osdxp/osdxp-dashboard . Enjoy!","title":"Via Composer"},{"location":"getting-started/#building-assets","text":"To compile source JS and SCSS files there are several options available. First, run npm install to pull missing dependencies. Run npm run build to compile development-focused, unminified files. Run npm run prod to compile production-ready, minified files. Run npm run watch or npm run watch-prod to compile with browsersync enabled(injecting modifications without page reload). Enjoy!","title":"Building assets"},{"location":"getting-started/#plugin-conversion","text":"If you already have a plugin developed and would like to convert it to be compatible with osDXP, following this developer reference will provide you with the required information to achieve osDXP compatibility.","title":"Plugin Conversion"},{"location":"getting-started/#resources","text":"Below you can find examples of osDXP plugin conversions, available from the osDXP GitHub organization repos. Example Module Integration, using WP Maintenance Mode plugin Shared Counts for osDXP Login Logo for osDXP","title":"Resources"},{"location":"getting-started/#versioning","text":"For transparency into our release cycle and in striving to maintain backward compatibility, osDXP Dashboard is maintained under the Romantic Versioning guidelines . Sometimes we screw up, but we adhere to those rules whenever possible.","title":"Versioning"},{"location":"guidelines/","text":"Module Guidelines \u00b6 Developers working on osDXP modules should follow the guidelines listed below Plugins should register only one settings page, available as a subpage of Module Settings GPL Compliant Codebase Php 7.2 minimum version compatibility Detailed docblocks need to be present throughout your codebase Plugins must validate against an established ruleset for PHP and Javascript, passing linting tests against these rules. PSR12 is the desired PHPCS ruleset to validate against, though if you're already using the WordPress Coding Standards, you may continue to do so for each osDXP plugin release for the immediate future. Javascript should validate against ES6, at a minimum. No SaaS-ification of Client Data(No Customer Data is saved on Vendors System) Clear data privacy standards Accessibility declaration Object Oriented/Class Based PHP. Follow osDXP UX Standards No \"AdWare\" (promotional popups, admin notices, or other text taking up screen space)","title":"Module Guidelines"},{"location":"guidelines/#module-guidelines","text":"Developers working on osDXP modules should follow the guidelines listed below Plugins should register only one settings page, available as a subpage of Module Settings GPL Compliant Codebase Php 7.2 minimum version compatibility Detailed docblocks need to be present throughout your codebase Plugins must validate against an established ruleset for PHP and Javascript, passing linting tests against these rules. PSR12 is the desired PHPCS ruleset to validate against, though if you're already using the WordPress Coding Standards, you may continue to do so for each osDXP plugin release for the immediate future. Javascript should validate against ES6, at a minimum. No SaaS-ification of Client Data(No Customer Data is saved on Vendors System) Clear data privacy standards Accessibility declaration Object Oriented/Class Based PHP. Follow osDXP UX Standards No \"AdWare\" (promotional popups, admin notices, or other text taking up screen space)","title":"Module Guidelines"},{"location":"licensing/","text":"Licensing inside osDXP \u00b6 osDXP strives to provide a central location for users to handle module licensing. This is available in the Installed Modules page. Below you can find the documentation needed to hook into osDXP licensing functionality. License Key Input \u00b6 Displaying a license key input can be achieved by using the osdxp_license_key_{MODULE_SLUG} filter, where {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ . Both filters are applied in wp-content/plugins/osdxp-dashboard/includes/dependencies/wordpress/class-osdxp-modules-list-table.php , inside the single_row method . Filter Parameters \u00b6 Initial license key Defaults to false Can either be false , null or a string (the license key) If the license key is false , it means that the plugin doesn\u2019t need any licensing, so the license key or input will not be displayed. If the license key is null , then the license key input will be displayed. If the license key is a string , then the license key will be displayed. Plugin slug ( string ) Filter Return Value \u00b6 The filter callbacks need to return either false , null or a string , as described above. Example Code \u00b6 add_filter('osdxp_license_key_my-example-plugin', 'my_example_license_key'); function my_example_license_key($license_key) { $valid = MyPluginClass::is_valid_key($license_key); if ($valid) { return esc_html__( $license_key, 'my-example-plugin' ); } elseif (false !== $license_key) { return esc_html__( 'Invalid or Expired.', 'my-example-plugin' ); } return $license_key; } License Field Markup \u00b6 You can customize the markup for the license key input by using the osdxp_dashboard_license_field_markup & osdxp_dashboard_license_key_markup filters. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/dependencies/wordpress/class-osdxp-modules-list-table.php , inside the single_row method . Filter Parameters \u00b6 License key (input field) markup ( string ) Plugin slug ( string ) Filter Return Value \u00b6 The filter callbacks need to return a string , which will be the license key (input field) markup. Example Code \u00b6 Below is an example of modifying the license key (input field) markup, using an example plugin called my-example-plugin . add_filter('osdxp_dashboard_license_field_markup', 'my_license_field_markup'); add_filter('osdxp_dashboard_license_key_markup', 'my_license_key_markup'); function my_license_field_markup($field_markup, $plugin_slug) { //Only apply to own module if ('my-example-plugin' !== $plugin_slug) { return $field_markup; } $markup = ' <div class=\"license-input-wrapper\"> <label for=\"my-example-plugin-license-field\"><strong>Enter License Key:</strong></label> <input id=\"my-example-plugin-license-field\" class=\"js-osdxp-module-license\" type=\"text\" size=\"40\" data-module=\"my-example-plugin\" > <button class=\"js-osdxp-submit-module-license button-primary\">Submit</button> </div> '; return $markup; } function my_license_key_markup($key_markup, $plugin_slug) { //Only apply to own module if ('my-example-plugin' !== $plugin_slug) { return $key_markup; } return '<p><strong>Valid Key!</strong></p>'; } Processing Submissions \u00b6 Once a license key is submitted, it is sent to a REST endpoint on the WP site and passed through to the osdxp_dashboard_license_submit_response filter, to process the license key and return a response array. This filter gives you the flexibility required to write whatever logic you need to process the submitted license key. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/licensing.php , inside the handle_license_submit method . The REST endpoint is registered by the register_rest_endpoints function and the requests to it are handled by the handle_license_submit function, both being located in wp-content/plugins/osdxp-dashboard/includes/licensing.php . The endpoint accepts POST requests to the following URL: /wp-json/osdxp-dashboard/v1/license/{MODULE_SLUG}/{LICENSE_KEY} . In this convention, {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ , and {LICENSE_KEY} is the submitted license key. Filter Parameters \u00b6 Response array which initially is just an empty array ( array ) Plugin slug ( string ) License key ( string ) Filter Return value \u00b6 The filter callbacks need to return an array with the following structure: license_key_markup ( string ) : if present, the license key field will be replaced with this markup string. You can apply the osdxp_dashboard_license_key_markup_{MODULE_SLUG} filter and pass the license key, to get the license key markup. error_messages ( array ): an array of error messages; success_message ( array ): an array of success messages. Example Code \u00b6 Below is an example of processing licensing keys using an example plugin called example-module . add_filter('osdxp_dashboard_license_submit_response', 'process_license_key_submit', 10, 3); function process_license_key_submit($response, $plugin_slug, $license_key) { // Process only the license submission for our plugin. if ('example-module' !== $plugin_slug) { return $response; } if (!is_array($response)) { $response = []; } // Sanitize license key. $license_key = sanitize_text_field($license_key); /* The following is an example licensing method. You would need to replace this and perhaps the following logic, with your own functinality. */ $license_api = LicenseAPI::getInstance($plugin_slug); $license_api->setAPIKey($license_key); $license_data = $license_api->getAccount(); if (is_wp_error($license_data)) { // Encountered a specific error. if (empty($response['error_messages']) || !is_array($response['error_messages'])) { $response['error_messages'] = []; } // Keep previous error messages. $response['error_messages'] = array_merge( $response['error_messages'], array_map('esc_html', $license_data->get_error_messages()) ); } elseif ($license_data) { save_license_key_and_data($plugin_slug, $license_key, $license_data); // Get license key markup. $response['license_key_markup'] = apply_filters( 'osdxp_dashboard_license_key_markup_' . $plugin_slug, $license_key ); // Keep previous success messages. if (empty($response['success_messages']) || !is_array($response['success_messages'])) { $response['success_messages'] = []; } $response['success_messages'][] = esc_html__('License successfully added.', 'osdxp-dashboard'); } else { // No error was encountered, but the license wasn't successfully added either. $response['error_messages'][] = esc_html__( 'An error has occurred when trying to process your license key. Please try again later.', 'example-module' ); } return $response; } Processing Removal Requests \u00b6 After a license has been added into the system, a \"Remove Key\" button will be displayed next to the license key. Once clicked, a confirmation popup will appear. If confirmed, an AJAX request will be sent to the license key removal REST endpoint, on the WP site, and passed through to the osdxp_dashboard_license_deletion_response filter to process the removal request and return a response. The REST endpoint is registered by the register_rest_endpoints function and the requests to it are handled by the handle_license_deletion function, both being located in wp-content/plugins/osdxp-dashboard/includes/licensing.php . The endpoint accepts DELETE requests to the following URL: /wp-json/osdxp-dashboard/v1/license/{MODULE_SLUG} . In this convention, {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ . Filter Parameters \u00b6 Response array which initially is just an empty array ( array ) Plugin slug ( string ) Filter Return Value \u00b6 The filter callbacks need to return an array with the following structure: success ( int ) : it has a value of 1 , if the key removal was completed successfully - this will tell the JS from the Installed Modules to remove the license key markup and display the license key input field, so that a new key can be entered; error_messages ( array ) : an array of error messages; success_message ( array ) : an array of success messages. Example Code \u00b6 add_filter('osdxp_dashboard_license_deletion_response', 'process_license_key_deletion', 10, 2); function process_license_key_deletion($response, $plugin_slug) { // Return response as-is if the request was not for your plugin. if ('test-module' !== plugin_slug) { return $response; } if (!is_array($response)) { $response = []; } // This is where you would place your code to delete the license key. ExampleClass::deleteLicense(); // Build response array. $response['success'] = 1; $response['success_messages'][] = esc_html__('License successfully removed.', 'test-module'); return $response; } Setting Persistent Errors \u00b6 If you want to set a persistent error, you can create a site transient called dxp_authorization_error_{MODULE_SLUG} to store the error and display it dynamically using the render_plugins_license_errors function, which is a hook for the admin_notices action. See the get_license_error_transient_name function inside wp-content/plugins/osdxp-dashboard/includes/licensing.php . You will also need to set a callback for the osdxp_dashboard_plugin_name_{MODULE_SLUG} filter, to return the human-readable plugin name (e.g.: Test Module). In this convention, {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ . Filter Parameters \u00b6 Plugin name ( string ) Filter Return value \u00b6 The filter callback needs to return the human-readable plugin name as a string . Example Code \u00b6 add_filter( 'osdxp_dashboard_plugin_name_test-module', function () { return 'Test Module'; } ); Displaying license status \u00b6 In order to display license status information for your module, you can use the osdxp_dashboard_license_data and osdxp_dashboard_license_data_{MODULE_SLUG} filters, where {MODULE_SLUG} is your module folder name or file name if your plugin is only 1 file and stays in the root of /wp-content/plugins/ . Filter Parameters \u00b6 License info, which is an array containing the following keys: expiry ( int ) - expiry time in UNIX timestamp format; e.g.: 1568723352 status ( string ) - a short string to reflect license status; e.g.: \"Premium - 25 sites\", \u201cExpired\u201d, \u201cActive\u201d Plugin slug ( string ) Filter Return Value \u00b6 The filter callbacks need to return an array with a structure similar to the one specified in the Filter Parameters. Example Code \u00b6 add_filter('osdxp_dashboard_license_data', 'my_license_information'); function my_license_information($license_data, $plugin_slug) { if ('test-module' === $plugin_slug) { return [ 'expiry' => 1568723352, 'status' => 'Active', ]; } return $license_data; } add_filter('osdxp_dashboard_license_data_test-module', 'my_license_information'); function my_license_information() { return [ 'expiry' => 1568723352, 'status' => 'Active', ]; }","title":"Licensing Functionality"},{"location":"licensing/#licensing-inside-osdxp","text":"osDXP strives to provide a central location for users to handle module licensing. This is available in the Installed Modules page. Below you can find the documentation needed to hook into osDXP licensing functionality.","title":"Licensing inside osDXP"},{"location":"licensing/#license-key-input","text":"Displaying a license key input can be achieved by using the osdxp_license_key_{MODULE_SLUG} filter, where {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ . Both filters are applied in wp-content/plugins/osdxp-dashboard/includes/dependencies/wordpress/class-osdxp-modules-list-table.php , inside the single_row method .","title":"License Key Input"},{"location":"licensing/#filter-parameters","text":"Initial license key Defaults to false Can either be false , null or a string (the license key) If the license key is false , it means that the plugin doesn\u2019t need any licensing, so the license key or input will not be displayed. If the license key is null , then the license key input will be displayed. If the license key is a string , then the license key will be displayed. Plugin slug ( string )","title":"Filter Parameters"},{"location":"licensing/#filter-return-value","text":"The filter callbacks need to return either false , null or a string , as described above.","title":"Filter Return Value"},{"location":"licensing/#example-code","text":"add_filter('osdxp_license_key_my-example-plugin', 'my_example_license_key'); function my_example_license_key($license_key) { $valid = MyPluginClass::is_valid_key($license_key); if ($valid) { return esc_html__( $license_key, 'my-example-plugin' ); } elseif (false !== $license_key) { return esc_html__( 'Invalid or Expired.', 'my-example-plugin' ); } return $license_key; }","title":"Example Code"},{"location":"licensing/#license-field-markup","text":"You can customize the markup for the license key input by using the osdxp_dashboard_license_field_markup & osdxp_dashboard_license_key_markup filters. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/dependencies/wordpress/class-osdxp-modules-list-table.php , inside the single_row method .","title":"License Field Markup"},{"location":"licensing/#filter-parameters_1","text":"License key (input field) markup ( string ) Plugin slug ( string )","title":"Filter Parameters"},{"location":"licensing/#filter-return-value_1","text":"The filter callbacks need to return a string , which will be the license key (input field) markup.","title":"Filter Return Value"},{"location":"licensing/#example-code_1","text":"Below is an example of modifying the license key (input field) markup, using an example plugin called my-example-plugin . add_filter('osdxp_dashboard_license_field_markup', 'my_license_field_markup'); add_filter('osdxp_dashboard_license_key_markup', 'my_license_key_markup'); function my_license_field_markup($field_markup, $plugin_slug) { //Only apply to own module if ('my-example-plugin' !== $plugin_slug) { return $field_markup; } $markup = ' <div class=\"license-input-wrapper\"> <label for=\"my-example-plugin-license-field\"><strong>Enter License Key:</strong></label> <input id=\"my-example-plugin-license-field\" class=\"js-osdxp-module-license\" type=\"text\" size=\"40\" data-module=\"my-example-plugin\" > <button class=\"js-osdxp-submit-module-license button-primary\">Submit</button> </div> '; return $markup; } function my_license_key_markup($key_markup, $plugin_slug) { //Only apply to own module if ('my-example-plugin' !== $plugin_slug) { return $key_markup; } return '<p><strong>Valid Key!</strong></p>'; }","title":"Example Code"},{"location":"licensing/#processing-submissions","text":"Once a license key is submitted, it is sent to a REST endpoint on the WP site and passed through to the osdxp_dashboard_license_submit_response filter, to process the license key and return a response array. This filter gives you the flexibility required to write whatever logic you need to process the submitted license key. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/licensing.php , inside the handle_license_submit method . The REST endpoint is registered by the register_rest_endpoints function and the requests to it are handled by the handle_license_submit function, both being located in wp-content/plugins/osdxp-dashboard/includes/licensing.php . The endpoint accepts POST requests to the following URL: /wp-json/osdxp-dashboard/v1/license/{MODULE_SLUG}/{LICENSE_KEY} . In this convention, {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ , and {LICENSE_KEY} is the submitted license key.","title":"Processing Submissions"},{"location":"licensing/#filter-parameters_2","text":"Response array which initially is just an empty array ( array ) Plugin slug ( string ) License key ( string )","title":"Filter Parameters"},{"location":"licensing/#filter-return-value_2","text":"The filter callbacks need to return an array with the following structure: license_key_markup ( string ) : if present, the license key field will be replaced with this markup string. You can apply the osdxp_dashboard_license_key_markup_{MODULE_SLUG} filter and pass the license key, to get the license key markup. error_messages ( array ): an array of error messages; success_message ( array ): an array of success messages.","title":"Filter Return value"},{"location":"licensing/#example-code_2","text":"Below is an example of processing licensing keys using an example plugin called example-module . add_filter('osdxp_dashboard_license_submit_response', 'process_license_key_submit', 10, 3); function process_license_key_submit($response, $plugin_slug, $license_key) { // Process only the license submission for our plugin. if ('example-module' !== $plugin_slug) { return $response; } if (!is_array($response)) { $response = []; } // Sanitize license key. $license_key = sanitize_text_field($license_key); /* The following is an example licensing method. You would need to replace this and perhaps the following logic, with your own functinality. */ $license_api = LicenseAPI::getInstance($plugin_slug); $license_api->setAPIKey($license_key); $license_data = $license_api->getAccount(); if (is_wp_error($license_data)) { // Encountered a specific error. if (empty($response['error_messages']) || !is_array($response['error_messages'])) { $response['error_messages'] = []; } // Keep previous error messages. $response['error_messages'] = array_merge( $response['error_messages'], array_map('esc_html', $license_data->get_error_messages()) ); } elseif ($license_data) { save_license_key_and_data($plugin_slug, $license_key, $license_data); // Get license key markup. $response['license_key_markup'] = apply_filters( 'osdxp_dashboard_license_key_markup_' . $plugin_slug, $license_key ); // Keep previous success messages. if (empty($response['success_messages']) || !is_array($response['success_messages'])) { $response['success_messages'] = []; } $response['success_messages'][] = esc_html__('License successfully added.', 'osdxp-dashboard'); } else { // No error was encountered, but the license wasn't successfully added either. $response['error_messages'][] = esc_html__( 'An error has occurred when trying to process your license key. Please try again later.', 'example-module' ); } return $response; }","title":"Example Code"},{"location":"licensing/#processing-removal-requests","text":"After a license has been added into the system, a \"Remove Key\" button will be displayed next to the license key. Once clicked, a confirmation popup will appear. If confirmed, an AJAX request will be sent to the license key removal REST endpoint, on the WP site, and passed through to the osdxp_dashboard_license_deletion_response filter to process the removal request and return a response. The REST endpoint is registered by the register_rest_endpoints function and the requests to it are handled by the handle_license_deletion function, both being located in wp-content/plugins/osdxp-dashboard/includes/licensing.php . The endpoint accepts DELETE requests to the following URL: /wp-json/osdxp-dashboard/v1/license/{MODULE_SLUG} . In this convention, {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ .","title":"Processing Removal Requests"},{"location":"licensing/#filter-parameters_3","text":"Response array which initially is just an empty array ( array ) Plugin slug ( string )","title":"Filter Parameters"},{"location":"licensing/#filter-return-value_3","text":"The filter callbacks need to return an array with the following structure: success ( int ) : it has a value of 1 , if the key removal was completed successfully - this will tell the JS from the Installed Modules to remove the license key markup and display the license key input field, so that a new key can be entered; error_messages ( array ) : an array of error messages; success_message ( array ) : an array of success messages.","title":"Filter Return Value"},{"location":"licensing/#example-code_3","text":"add_filter('osdxp_dashboard_license_deletion_response', 'process_license_key_deletion', 10, 2); function process_license_key_deletion($response, $plugin_slug) { // Return response as-is if the request was not for your plugin. if ('test-module' !== plugin_slug) { return $response; } if (!is_array($response)) { $response = []; } // This is where you would place your code to delete the license key. ExampleClass::deleteLicense(); // Build response array. $response['success'] = 1; $response['success_messages'][] = esc_html__('License successfully removed.', 'test-module'); return $response; }","title":"Example Code"},{"location":"licensing/#setting-persistent-errors","text":"If you want to set a persistent error, you can create a site transient called dxp_authorization_error_{MODULE_SLUG} to store the error and display it dynamically using the render_plugins_license_errors function, which is a hook for the admin_notices action. See the get_license_error_transient_name function inside wp-content/plugins/osdxp-dashboard/includes/licensing.php . You will also need to set a callback for the osdxp_dashboard_plugin_name_{MODULE_SLUG} filter, to return the human-readable plugin name (e.g.: Test Module). In this convention, {MODULE_SLUG} is your module folder name or file name if your plugin is only one file and stays in the root of /wp-content/plugins/ .","title":"Setting Persistent Errors"},{"location":"licensing/#filter-parameters_4","text":"Plugin name ( string )","title":"Filter Parameters"},{"location":"licensing/#filter-return-value_4","text":"The filter callback needs to return the human-readable plugin name as a string .","title":"Filter Return value"},{"location":"licensing/#example-code_4","text":"add_filter( 'osdxp_dashboard_plugin_name_test-module', function () { return 'Test Module'; } );","title":"Example Code"},{"location":"licensing/#displaying-license-status","text":"In order to display license status information for your module, you can use the osdxp_dashboard_license_data and osdxp_dashboard_license_data_{MODULE_SLUG} filters, where {MODULE_SLUG} is your module folder name or file name if your plugin is only 1 file and stays in the root of /wp-content/plugins/ .","title":"Displaying license status"},{"location":"licensing/#filter-parameters_5","text":"License info, which is an array containing the following keys: expiry ( int ) - expiry time in UNIX timestamp format; e.g.: 1568723352 status ( string ) - a short string to reflect license status; e.g.: \"Premium - 25 sites\", \u201cExpired\u201d, \u201cActive\u201d Plugin slug ( string )","title":"Filter Parameters"},{"location":"licensing/#filter-return-value_5","text":"The filter callbacks need to return an array with a structure similar to the one specified in the Filter Parameters.","title":"Filter Return Value"},{"location":"licensing/#example-code_5","text":"add_filter('osdxp_dashboard_license_data', 'my_license_information'); function my_license_information($license_data, $plugin_slug) { if ('test-module' === $plugin_slug) { return [ 'expiry' => 1568723352, 'status' => 'Active', ]; } return $license_data; } add_filter('osdxp_dashboard_license_data_test-module', 'my_license_information'); function my_license_information() { return [ 'expiry' => 1568723352, 'status' => 'Active', ]; }","title":"Example Code"},{"location":"manage-button/","text":"Modifying the Manage License Button \u00b6 The Installed Modules page will output a Manage License link on the Status column. The URL linked to this will be pulled from the Author URI key available in your plugins header. Below you can find information on modifying the outputted buttons text. Filter Definition \u00b6 The filter that should be used is in the form of osdxp_manage_button_module_{$SLUG} , where {$SLUG} is your modules folder or main plugin file, in sluggified format. For example, a plugin called My First Plugin with its main plugin file located at /wp-content/plugins/my-first-plugin/my-first-plugin.php will have its slug as my-first-plugin and its filter will be osdxp_manage_button_module_my-first-plugin . You can use this filter to change the text output on the installed modules page Filter Return Value \u00b6 The function hooked in the osdxp_manage_button_module_{$SLUG} should return a string . Example Code \u00b6 Below you can find an example implementation of the osdxp_manage_button_module_{$SLUG} filter, using a plugin called my-plugin-example . add_filter( 'osdxp_manage_button_module_my-plugin-example', function () { //Will output \"View Website\" instead of the default \"Manage License\" return 'View Website'; } );","title":"Module Status Button"},{"location":"manage-button/#modifying-the-manage-license-button","text":"The Installed Modules page will output a Manage License link on the Status column. The URL linked to this will be pulled from the Author URI key available in your plugins header. Below you can find information on modifying the outputted buttons text.","title":"Modifying the Manage License Button"},{"location":"manage-button/#filter-definition","text":"The filter that should be used is in the form of osdxp_manage_button_module_{$SLUG} , where {$SLUG} is your modules folder or main plugin file, in sluggified format. For example, a plugin called My First Plugin with its main plugin file located at /wp-content/plugins/my-first-plugin/my-first-plugin.php will have its slug as my-first-plugin and its filter will be osdxp_manage_button_module_my-first-plugin . You can use this filter to change the text output on the installed modules page","title":"Filter Definition"},{"location":"manage-button/#filter-return-value","text":"The function hooked in the osdxp_manage_button_module_{$SLUG} should return a string .","title":"Filter Return Value"},{"location":"manage-button/#example-code","text":"Below you can find an example implementation of the osdxp_manage_button_module_{$SLUG} filter, using a plugin called my-plugin-example . add_filter( 'osdxp_manage_button_module_my-plugin-example', function () { //Will output \"View Website\" instead of the default \"Manage License\" return 'View Website'; } );","title":"Example Code"},{"location":"modularize/","text":"Module Registration \u00b6 In order for your plugin to appear as a module in the installed modules page, it has to first be recognized as a module by osDXP. This means it needs to be a part of the available modules data . Available Modules Endpoint \u00b6 Available modules data is retrieved in the following order: transient > remote > local Definition \u00b6 The available modules endpoint is defined in the main plugin file, at line 62 : define('OSDXP_DASHBOARD_AVAILABLE_MODULES_LIST_URL', OSDXP_DASHBOARD_API_URL . '/modules'); Customization \u00b6 This definition can be changed with either your own endpoint or with false if you only want to parse the information available in the local json file, available at: /wp-content/plugins/osdxp-dashboard/default-available-modules.json This file also provides an example for how your endpoint should structure the returned data in order for it to be parsable by the plugin. Addition \u00b6 Please get in touch with us if you would like your module to appear in the default available modules endpoint. Available Modules Filter \u00b6 osDXP Dashboard exposes two available filters that, when used in conjunction, allows plugins to declare themselves as modules. This method only works when the plugin is installed and activated, since your logic needs to be executed. Definition \u00b6 These filters are: osdxp_get_modules osdxp_get_available_modules Addition \u00b6 Please find below an example usage of this method. add_filter('osdxp_get_modules','my_module'); add_filter('osdxp_get_available_modules','my_module'); //setting up module information function my_module($modules) { //plugin basename $slug = 'my-module/my-module.php'; //plugin header info //second param is false to strip extra markup injected by WP $modules[$slug] = get_plugin_data(WPMM_PLUGIN_FILE, false); //optional - if not set will output a placeholder logo $modules[$slug]['logo'] = 'https://my-module.com/my-logo.svg'; //the 'Get Module' URL present in the Available Modules Page $modules[$slug]['url'] = 'https://my-module.com'; //pricing info. can be left unset if not premium. $modules[$slug]['price'] = '99.99'; $modules[$slug]['before-price-text'] = 'From'; $modules[$slug]['after-price-text'] = 'Per Year'; return $modules; }","title":"Registering a Module"},{"location":"modularize/#module-registration","text":"In order for your plugin to appear as a module in the installed modules page, it has to first be recognized as a module by osDXP. This means it needs to be a part of the available modules data .","title":"Module Registration"},{"location":"modularize/#available-modules-endpoint","text":"Available modules data is retrieved in the following order: transient > remote > local","title":"Available Modules Endpoint"},{"location":"modularize/#definition","text":"The available modules endpoint is defined in the main plugin file, at line 62 : define('OSDXP_DASHBOARD_AVAILABLE_MODULES_LIST_URL', OSDXP_DASHBOARD_API_URL . '/modules');","title":"Definition"},{"location":"modularize/#customization","text":"This definition can be changed with either your own endpoint or with false if you only want to parse the information available in the local json file, available at: /wp-content/plugins/osdxp-dashboard/default-available-modules.json This file also provides an example for how your endpoint should structure the returned data in order for it to be parsable by the plugin.","title":"Customization"},{"location":"modularize/#addition","text":"Please get in touch with us if you would like your module to appear in the default available modules endpoint.","title":"Addition"},{"location":"modularize/#available-modules-filter","text":"osDXP Dashboard exposes two available filters that, when used in conjunction, allows plugins to declare themselves as modules. This method only works when the plugin is installed and activated, since your logic needs to be executed.","title":"Available Modules Filter"},{"location":"modularize/#definition_1","text":"These filters are: osdxp_get_modules osdxp_get_available_modules","title":"Definition"},{"location":"modularize/#addition_1","text":"Please find below an example usage of this method. add_filter('osdxp_get_modules','my_module'); add_filter('osdxp_get_available_modules','my_module'); //setting up module information function my_module($modules) { //plugin basename $slug = 'my-module/my-module.php'; //plugin header info //second param is false to strip extra markup injected by WP $modules[$slug] = get_plugin_data(WPMM_PLUGIN_FILE, false); //optional - if not set will output a placeholder logo $modules[$slug]['logo'] = 'https://my-module.com/my-logo.svg'; //the 'Get Module' URL present in the Available Modules Page $modules[$slug]['url'] = 'https://my-module.com'; //pricing info. can be left unset if not premium. $modules[$slug]['price'] = '99.99'; $modules[$slug]['before-price-text'] = 'From'; $modules[$slug]['after-price-text'] = 'Per Year'; return $modules; }","title":"Addition"},{"location":"reference/","text":"Filter Reference Status \u00b6 Below you can find all available osDXP Dashboard filters and their documentation status. FILTER DOCUMENTED osdxp_dashboard_plugin_file_{MODULE_SLUG} Yes osdxp_dashboard_plugin_update_metadata_url_{MODULE_SLUG} Yes osdxp_get_available_modules Yes osdxp_add_module_settings_page Yes osdxp_get_modules Yes osdxp_dashboard_is_active Yes osdxp_dashboard_license_data_{MODULE_SLUG{ Yes osdxp_license_key_{MODULE_SLUG} Yes osdxp_dashboard_plugin_name_{MODULE_SLUG} Yes osdxp_filter_cpts No osdxp_dashboard_licensed_plugins No osdxp_dashboard_internal_licensed_plugins No osdxp_dashboard_plugin_update_checker_list Yes osdxp_dashboard_license_submit_response Yes osdxp_dashboard_license_deletion_response Yes osdxp_dashboard_license_key_markup Yes osdxp_dashboard_license_field_markup Yes osdxp_license_key Yes osdxp_module_column_status No osdxp_dashboard_license_data Yes osdxp_dashboard_editor_create_functionality Yes osdxp_dashboard_editor_manage_functionality Yes osdxp_dashboard_multisite_manage_functionality Yes osdxp_dashboard_multisite_create_functionality Yes osdxp_dashboard_network_create_functionality Yes osdxp_dashboard_network_manage_functionality Yes osdxp_dashboard_single_manage_functionality Yes osdxp_dashboard_single_create_functionality Yes","title":"Filter Reference"},{"location":"reference/#filter-reference-status","text":"Below you can find all available osDXP Dashboard filters and their documentation status. FILTER DOCUMENTED osdxp_dashboard_plugin_file_{MODULE_SLUG} Yes osdxp_dashboard_plugin_update_metadata_url_{MODULE_SLUG} Yes osdxp_get_available_modules Yes osdxp_add_module_settings_page Yes osdxp_get_modules Yes osdxp_dashboard_is_active Yes osdxp_dashboard_license_data_{MODULE_SLUG{ Yes osdxp_license_key_{MODULE_SLUG} Yes osdxp_dashboard_plugin_name_{MODULE_SLUG} Yes osdxp_filter_cpts No osdxp_dashboard_licensed_plugins No osdxp_dashboard_internal_licensed_plugins No osdxp_dashboard_plugin_update_checker_list Yes osdxp_dashboard_license_submit_response Yes osdxp_dashboard_license_deletion_response Yes osdxp_dashboard_license_key_markup Yes osdxp_dashboard_license_field_markup Yes osdxp_license_key Yes osdxp_module_column_status No osdxp_dashboard_license_data Yes osdxp_dashboard_editor_create_functionality Yes osdxp_dashboard_editor_manage_functionality Yes osdxp_dashboard_multisite_manage_functionality Yes osdxp_dashboard_multisite_create_functionality Yes osdxp_dashboard_network_create_functionality Yes osdxp_dashboard_network_manage_functionality Yes osdxp_dashboard_single_manage_functionality Yes osdxp_dashboard_single_create_functionality Yes","title":"Filter Reference Status"},{"location":"settings/","text":"Settings Page Registration \u00b6 osDXP modules should only register one setting page, as a direct child to Module Settings page. These can then be categorized via navigation tabs, as documented below. Top-level pages will need to provide an actionable element in order for them be accepted. As an example, a module can register a top-level page for a CTA-type element. That is to say, an outputable custom post type that serves as a call to action for your website. Filter Definition \u00b6 The filter osdxp_add_module_settings_page should be used in order to register a settings page. Filter Parameters \u00b6 These are based off the WordPress add_menu_page() & add_submenu_page() functions. function (callable) The function to be called to output your settings page. menu_slug (string) The slug name to refer to this menu. It should be unique and only include lowercase alphanumeric, dashes, and underscores characters. parent_slug (string) The parent slug name in case of a submenu or endpoint. page_title (string) The text that is displayed in the page\u2019s title when the menu is selected. menu_title (string) This is the text that is seen in the menu. icon_url (string) Accepts dashicons class, base64-encoded svg or link to an image file. Check Wordpress documentation for more in-depth information. type (string) Page type. Accepts menu , submenu or endpoint . Endpoint is a hidden sub-page. Use this if you want to link multiple settings pages with navtabs. network (string) Network is used if your module needs a Network Admin settings page. You have three options here. Not using the parameter, leaving it out of your code. You can leave \u2018network\u2019 out of your parameters. If you do this, your settings page will only show up in the Dashboard under an individual site or in a single-site install. both - Setting network to both will output your page in both individual Dashboards and under Network Admin. The use case here is you have one settings page with conditionals for network vs individual admin settings. yes - Setting network to yes will output your settings page only under Network Admin. Filter Return Value \u00b6 Your function needs to accept a $pages parameter of type array , in which you can append your page declaration. This variable must be returned by your function. Navigation Tabs \u00b6 If you would like to use navtabs for your settings page, consider using the following markup. The classes used are styled to be inline with osDXP brand identity. <ul class=\"osdxp-nav-tabs\u201d> <li>page 1</li> <li class=\"active\u201d>active page</li> </ul> Example Code Snippet \u00b6 Below you can find an example declaration of a settings page. add_filter('osdxp_add_module_settings_page', 'my_settings_page'); function my_settings_page($pages) { $pages[] = [ 'function' => 'my_settings_page_output', 'menu_slug' => 'test_plugin', 'parent_slug' => 'parent_slug', //Default Module Settings page 'page_title' => 'My Settings Page', 'menu_title' => 'My Settings', 'type' => 'subpage', 'icon_url' => 'my-icon.png', 'network' => 'both' //Default No ]; return $pages; } function my_settings_page_output() { echo 'my settings'; }","title":"Adding a Settings Page"},{"location":"settings/#settings-page-registration","text":"osDXP modules should only register one setting page, as a direct child to Module Settings page. These can then be categorized via navigation tabs, as documented below. Top-level pages will need to provide an actionable element in order for them be accepted. As an example, a module can register a top-level page for a CTA-type element. That is to say, an outputable custom post type that serves as a call to action for your website.","title":"Settings Page Registration"},{"location":"settings/#filter-definition","text":"The filter osdxp_add_module_settings_page should be used in order to register a settings page.","title":"Filter Definition"},{"location":"settings/#filter-parameters","text":"These are based off the WordPress add_menu_page() & add_submenu_page() functions. function (callable) The function to be called to output your settings page. menu_slug (string) The slug name to refer to this menu. It should be unique and only include lowercase alphanumeric, dashes, and underscores characters. parent_slug (string) The parent slug name in case of a submenu or endpoint. page_title (string) The text that is displayed in the page\u2019s title when the menu is selected. menu_title (string) This is the text that is seen in the menu. icon_url (string) Accepts dashicons class, base64-encoded svg or link to an image file. Check Wordpress documentation for more in-depth information. type (string) Page type. Accepts menu , submenu or endpoint . Endpoint is a hidden sub-page. Use this if you want to link multiple settings pages with navtabs. network (string) Network is used if your module needs a Network Admin settings page. You have three options here. Not using the parameter, leaving it out of your code. You can leave \u2018network\u2019 out of your parameters. If you do this, your settings page will only show up in the Dashboard under an individual site or in a single-site install. both - Setting network to both will output your page in both individual Dashboards and under Network Admin. The use case here is you have one settings page with conditionals for network vs individual admin settings. yes - Setting network to yes will output your settings page only under Network Admin.","title":"Filter Parameters"},{"location":"settings/#filter-return-value","text":"Your function needs to accept a $pages parameter of type array , in which you can append your page declaration. This variable must be returned by your function.","title":"Filter Return Value"},{"location":"settings/#navigation-tabs","text":"If you would like to use navtabs for your settings page, consider using the following markup. The classes used are styled to be inline with osDXP brand identity. <ul class=\"osdxp-nav-tabs\u201d> <li>page 1</li> <li class=\"active\u201d>active page</li> </ul>","title":"Navigation Tabs"},{"location":"settings/#example-code-snippet","text":"Below you can find an example declaration of a settings page. add_filter('osdxp_add_module_settings_page', 'my_settings_page'); function my_settings_page($pages) { $pages[] = [ 'function' => 'my_settings_page_output', 'menu_slug' => 'test_plugin', 'parent_slug' => 'parent_slug', //Default Module Settings page 'page_title' => 'My Settings Page', 'menu_title' => 'My Settings', 'type' => 'subpage', 'icon_url' => 'my-icon.png', 'network' => 'both' //Default No ]; return $pages; } function my_settings_page_output() { echo 'my settings'; }","title":"Example Code Snippet"},{"location":"styling/","text":"Styling \u00b6 Dashboard Class or Constants \u00b6 In order to maintain design uniformity and be able to style your module markup specifically for osDXP, you can make use of either the CSS class or PHP constant defined by osDXP Dashboard. When the Dashboard is active, the dxp-dashboard class is added to the body element class list, allowing you to scope styles for osDXP-only use. There is also the OSDXP_DASHBOARD_IS_ACTIVE constant that gets defined and set to 1 when the osDXP Dashboard is visible. In legacy WordPress, this is unset. Example Code \u00b6 .wp-admin.dxp-dashboard .my-class { color: red; } Notification Threshold \u00b6 In order to maintain clarity, osDXP Dashboard will concatenate all administrator notifications into a single, expandable, notification. If desired, this functionality can be hooked into via the osdxp_notifications_threshold filter in order to define the threshold at which concatenation will happen. Filter Return Value \u00b6 The filter callback needs to return the threshold number as an integer . Example Code \u00b6 add_filter( 'osdxp_notifications_threshold', function () { //will collapse notifications if 20 or more present return 20; } ); Dashboard Widgets \u00b6 Modules may output an osDXP Dashboard widget by using any of the following filters: osdxp_dashboard_editor_create_functionality - Create widget for Editor osdxp_dashboard_editor_manage_functionality - Manage widget for Editor osdxp_dashboard_multisite_create_functionality - Create widget for Multisite Admin osdxp_dashboard_multisite_manage_functionality - Manage widget for Multisite Admin osdxp_dashboard_network_create_functionality - Create widget for Network Admin osdxp_dashboard_network_manage_functionality - Manage widget for Network Admin osdxp_dashboard_single_create_functionality - Create widget for Single-site Admin osdxp_dashboard_single_manage_functionality - Manage widget for Single-site Admin Filter Parameters \u00b6 You hooked function needs to accept an array $widgets . Your function needs to append to said array an array consisting of the following keys: title - Your widget title subtitle - Your widget subtitle link - Your widget link icon - Your widget icon in the form of a dashicons class button_text - Your widget button text - Only for manage-type widgets Filter Return Value \u00b6 Your hooked function needs to return an array of arrays consisting of aforementioned keys. Example Code \u00b6 add_filter('osdxp_dashboard_multisite_manage_functionality', 'call_back_f2'); function call_back_f2($example) { $example[] = array( 'title' => 'title', 'subtitle' => 'subtitle', 'link' => self_admin_url('options.php'), 'icon' => 'dashicons-admin-settings', 'button_text' => 'button text', // For create-type widgets this does not apply ); return $example; }","title":"Styling"},{"location":"styling/#styling","text":"","title":"Styling"},{"location":"styling/#dashboard-class-or-constants","text":"In order to maintain design uniformity and be able to style your module markup specifically for osDXP, you can make use of either the CSS class or PHP constant defined by osDXP Dashboard. When the Dashboard is active, the dxp-dashboard class is added to the body element class list, allowing you to scope styles for osDXP-only use. There is also the OSDXP_DASHBOARD_IS_ACTIVE constant that gets defined and set to 1 when the osDXP Dashboard is visible. In legacy WordPress, this is unset.","title":"Dashboard Class or Constants"},{"location":"styling/#example-code","text":".wp-admin.dxp-dashboard .my-class { color: red; }","title":"Example Code"},{"location":"styling/#notification-threshold","text":"In order to maintain clarity, osDXP Dashboard will concatenate all administrator notifications into a single, expandable, notification. If desired, this functionality can be hooked into via the osdxp_notifications_threshold filter in order to define the threshold at which concatenation will happen.","title":"Notification Threshold"},{"location":"styling/#filter-return-value","text":"The filter callback needs to return the threshold number as an integer .","title":"Filter Return Value"},{"location":"styling/#example-code_1","text":"add_filter( 'osdxp_notifications_threshold', function () { //will collapse notifications if 20 or more present return 20; } );","title":"Example Code"},{"location":"styling/#dashboard-widgets","text":"Modules may output an osDXP Dashboard widget by using any of the following filters: osdxp_dashboard_editor_create_functionality - Create widget for Editor osdxp_dashboard_editor_manage_functionality - Manage widget for Editor osdxp_dashboard_multisite_create_functionality - Create widget for Multisite Admin osdxp_dashboard_multisite_manage_functionality - Manage widget for Multisite Admin osdxp_dashboard_network_create_functionality - Create widget for Network Admin osdxp_dashboard_network_manage_functionality - Manage widget for Network Admin osdxp_dashboard_single_create_functionality - Create widget for Single-site Admin osdxp_dashboard_single_manage_functionality - Manage widget for Single-site Admin","title":"Dashboard Widgets"},{"location":"styling/#filter-parameters","text":"You hooked function needs to accept an array $widgets . Your function needs to append to said array an array consisting of the following keys: title - Your widget title subtitle - Your widget subtitle link - Your widget link icon - Your widget icon in the form of a dashicons class button_text - Your widget button text - Only for manage-type widgets","title":"Filter Parameters"},{"location":"styling/#filter-return-value_1","text":"Your hooked function needs to return an array of arrays consisting of aforementioned keys.","title":"Filter Return Value"},{"location":"styling/#example-code_2","text":"add_filter('osdxp_dashboard_multisite_manage_functionality', 'call_back_f2'); function call_back_f2($example) { $example[] = array( 'title' => 'title', 'subtitle' => 'subtitle', 'link' => self_admin_url('options.php'), 'icon' => 'dashicons-admin-settings', 'button_text' => 'button text', // For create-type widgets this does not apply ); return $example; }","title":"Example Code"},{"location":"updating/","text":"Update checking \u00b6 If desired, you can hook into our update checker system by following the below documentation. As an outline, you will need to use the following filters: osdxp_dashboard_plugin_update_checker_list filter to register your plugin slug; osdxp_dashboard_plugin_file_{MODULE_SLUG} filter to return the absolute path to your main plugin file; osdxp_dashboard_plugin_update_metadata_url_{MODULE_SLUG} filter to register the URL to the plugin update meta. The URL endpoint should provide the module update metadata as a JSON adhering to the format outlined in this document: Plugin Update Checker JSON API reference . Registering the Updater \u00b6 The osdxp_dashboard_plugin_update_checker_list filter is used to register plugins to the osDXP update checker system. It is applied in wp-content/plugins/osdxp-dashboard/includes/licensing.php , inside the init_update_checker method . Filter Parameters \u00b6 An array containing plugin slugs ( array ) Filter Return Value \u00b6 The filter callbacks need to return an array of plugin slugs. Example Code \u00b6 add_filter( 'osdxp_dashboard_plugin_update_checker_list', function () { if (!is_array($plugins)) { $plugins = []; } if (!in_array('example-module', $plugins, true)) { $plugins[] = 'example-module'; } return $plugins; } ); Registering the Module File \u00b6 The osdxp_dashboard_plugin_file_{MODULE_SLUG} filter is used to register the full path to your main plugin file. This is necessary for the plugin update checker to work. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/class-licenseapi.php , inside the initUpdateChecker method . {MODULE_SLUG} is your module folder name or file name if your plugin is only 1 file and stays in the root of /wp-content/plugins/ . Filter Parameters \u00b6 The full path to your modules main plugin file ( string ) Filter Return Value \u00b6 The filter callback needs to return the full path to your main plugin file as a string . Example Code \u00b6 add_filter( 'osdxp_dashboard_plugin_file_example-module', function () { return '/full/path/to/wp-content/plugins/example-module/example-module.php'; } ); Registering the Update Endpoint \u00b6 The osdxp_dashboard_plugin_update_metadata_url_{MODULE_SLUG} filter is used to register the URL to the plugin update meta. The URL endpoint should provide the module update metadata as a JSON adhering to the format outlined in this document: Plugin Update Checker JSON API reference . The method used to query the metadata URL is POST. Please make sure your endpoint is set up this way if you would like to use our updater. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/class-licenseapi.php , inside the initUpdateChecker method . {MODULE_SLUG} is your module folder name or file name if your plugin is only 1 file and stays in the root of /wp-content/plugins/ . Filter Parameters \u00b6 URL to the plugin update meta ( string ) Filter Return Value \u00b6 The filter callback needs to return the URL to the plugin update meta as a string . Example Code \u00b6 add_filter( 'osdxp_dashboard_plugin_update_metadata_url_example-module', function () { return 'https://web.site/url-to-plugin-update-meta.json'; } ); Update Checker Class \u00b6 If desired, your module can use the Update Checker class on its own. The class is located in wp-content/plugins/osdxp-dashboard/includes/dependencies/plugin-update-checker/class-osdxp-module-update-checker.php . Below is an example use case. Example Code \u00b6 add_action('plugins_loaded', function () { new OSDXP_Dashboard\\OsdxpModuleUpdateChecker( \u2018https://myupdateurl.com/update-info.json\u2019, \u2018my-plugin/my-plugin.php\u2019, \u2018my-plugin\u2019 ); });","title":"Update Functionality"},{"location":"updating/#update-checking","text":"If desired, you can hook into our update checker system by following the below documentation. As an outline, you will need to use the following filters: osdxp_dashboard_plugin_update_checker_list filter to register your plugin slug; osdxp_dashboard_plugin_file_{MODULE_SLUG} filter to return the absolute path to your main plugin file; osdxp_dashboard_plugin_update_metadata_url_{MODULE_SLUG} filter to register the URL to the plugin update meta. The URL endpoint should provide the module update metadata as a JSON adhering to the format outlined in this document: Plugin Update Checker JSON API reference .","title":"Update checking"},{"location":"updating/#registering-the-updater","text":"The osdxp_dashboard_plugin_update_checker_list filter is used to register plugins to the osDXP update checker system. It is applied in wp-content/plugins/osdxp-dashboard/includes/licensing.php , inside the init_update_checker method .","title":"Registering the Updater"},{"location":"updating/#filter-parameters","text":"An array containing plugin slugs ( array )","title":"Filter Parameters"},{"location":"updating/#filter-return-value","text":"The filter callbacks need to return an array of plugin slugs.","title":"Filter Return Value"},{"location":"updating/#example-code","text":"add_filter( 'osdxp_dashboard_plugin_update_checker_list', function () { if (!is_array($plugins)) { $plugins = []; } if (!in_array('example-module', $plugins, true)) { $plugins[] = 'example-module'; } return $plugins; } );","title":"Example Code"},{"location":"updating/#registering-the-module-file","text":"The osdxp_dashboard_plugin_file_{MODULE_SLUG} filter is used to register the full path to your main plugin file. This is necessary for the plugin update checker to work. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/class-licenseapi.php , inside the initUpdateChecker method . {MODULE_SLUG} is your module folder name or file name if your plugin is only 1 file and stays in the root of /wp-content/plugins/ .","title":"Registering the Module File"},{"location":"updating/#filter-parameters_1","text":"The full path to your modules main plugin file ( string )","title":"Filter Parameters"},{"location":"updating/#filter-return-value_1","text":"The filter callback needs to return the full path to your main plugin file as a string .","title":"Filter Return Value"},{"location":"updating/#example-code_1","text":"add_filter( 'osdxp_dashboard_plugin_file_example-module', function () { return '/full/path/to/wp-content/plugins/example-module/example-module.php'; } );","title":"Example Code"},{"location":"updating/#registering-the-update-endpoint","text":"The osdxp_dashboard_plugin_update_metadata_url_{MODULE_SLUG} filter is used to register the URL to the plugin update meta. The URL endpoint should provide the module update metadata as a JSON adhering to the format outlined in this document: Plugin Update Checker JSON API reference . The method used to query the metadata URL is POST. Please make sure your endpoint is set up this way if you would like to use our updater. The filter is applied in wp-content/plugins/osdxp-dashboard/includes/class-licenseapi.php , inside the initUpdateChecker method . {MODULE_SLUG} is your module folder name or file name if your plugin is only 1 file and stays in the root of /wp-content/plugins/ .","title":"Registering the Update Endpoint"},{"location":"updating/#filter-parameters_2","text":"URL to the plugin update meta ( string )","title":"Filter Parameters"},{"location":"updating/#filter-return-value_2","text":"The filter callback needs to return the URL to the plugin update meta as a string .","title":"Filter Return Value"},{"location":"updating/#example-code_2","text":"add_filter( 'osdxp_dashboard_plugin_update_metadata_url_example-module', function () { return 'https://web.site/url-to-plugin-update-meta.json'; } );","title":"Example Code"},{"location":"updating/#update-checker-class","text":"If desired, your module can use the Update Checker class on its own. The class is located in wp-content/plugins/osdxp-dashboard/includes/dependencies/plugin-update-checker/class-osdxp-module-update-checker.php . Below is an example use case.","title":"Update Checker Class"},{"location":"updating/#example-code_3","text":"add_action('plugins_loaded', function () { new OSDXP_Dashboard\\OsdxpModuleUpdateChecker( \u2018https://myupdateurl.com/update-info.json\u2019, \u2018my-plugin/my-plugin.php\u2019, \u2018my-plugin\u2019 ); });","title":"Example Code"}]}